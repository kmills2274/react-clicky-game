{"ast":null,"code":"var _jsxFileName = \"/Users/kmills/Desktop/Homework/react-clicky-game/react-clicky-game/src/App.js\";\nimport React, { Component } from 'react';\nimport Nav from \"./Components/Nav/Nav\";\nimport Container from \"./Components/Container/Container\";\nimport Instructions from \"./Components/Instructions/Instructions\";\nimport CardsDisplay from \"./Components/Cards/CardsDisplay\";\nimport cards from \"./Components/Cards/Cards\";\nimport Footer from \"./Components/Footer/Footer\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clickedImages: [],\n      cardsArr: cards,\n      score: 0,\n      highestScore: 0,\n      status: \"\"\n    };\n\n    this.shuffleImages = id => {\n      console.log(id);\n      let clickedImages = this.state.clickedImages;\n\n      if (clickedImages.includes(id)) {\n        alert(\"Sorry! You already visited there once!\");\n        const refreshCards = cards.map(c => {\n          return c;\n        });\n        const shuffleImages = refreshCards.sort((a, b) => 0.5 - Math.random());\n        this.setState({\n          cardsArr: shuffleImages,\n          clickedImages: [],\n          score: 0,\n          status: \"Game Over! You Lost. Click to play again!\"\n        });\n        return;\n      } else {\n        clickedImages.push(id);\n        console.log(\"click function working\");\n        const shuffleImages = this.state.cardsArr.sort((a, b) => 0.5 - Math.random());\n        this.setState({\n          cardsArr: shuffleImages,\n          score: this.state.score + 1\n        });\n\n        if (clickedImages.length === 15) {\n          this.setState({\n            score: 15,\n            status: \"You Won! Great Job\",\n            clickedImages: []\n          });\n          alert(\"You Win! You visited all 15 cities!\");\n          return;\n        }\n\n        this.setState({\n          cardsArr: shuffleImages,\n          clickedImages,\n          score: clickedImages.length,\n          status: \" \"\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Nav, {\n      score: this.state.score,\n      goal: this.state.highestScore,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Instructions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(CardsDisplay, {\n      cardsArr: this.state.cardsArr,\n      shuffleImages: this.shuffleImages,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kmills/Desktop/Homework/react-clicky-game/react-clicky-game/src/App.js"],"names":["React","Component","Nav","Container","Instructions","CardsDisplay","cards","Footer","App","state","clickedImages","cardsArr","score","highestScore","status","shuffleImages","id","console","log","includes","alert","refreshCards","map","c","sort","a","b","Math","random","setState","push","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Nav from \"./Components/Nav/Nav\";\nimport Container from \"./Components/Container/Container\";\nimport Instructions from \"./Components/Instructions/Instructions\";\nimport CardsDisplay from \"./Components/Cards/CardsDisplay\";\nimport cards from \"./Components/Cards/Cards\";\nimport Footer from \"./Components/Footer/Footer\";\nimport './App.css';\n\n\nclass App extends Component{\n    state={\n    clickedImages: [],\n    cardsArr: cards,\n    score: 0,\n    highestScore: 0,\n    status: \"\"\n};\n\n\nshuffleImages= id => {\n    console.log(id);\n    let clickedImages = this.state.clickedImages;\n\n    if(clickedImages.includes(id)){\n        alert(\"Sorry! You already visited there once!\");\n        const refreshCards =\n        cards.map(c => {\n            return c;\n\n        })\n        const shuffleImages = refreshCards.sort((a,b) => 0.5 - Math.random())\n        this.setState({ cardsArr:shuffleImages, clickedImages: [], score: 0, status: \"Game Over! You Lost. Click to play again!\"});\n        return;\n    }else{\n        clickedImages.push(id)\n        console.log(\"click function working\");\n        const shuffleImages = this.state.cardsArr.sort((a,b) => 0.5 - Math.random())\n        this.setState({cardsArr: shuffleImages, score:this.state.score +1}) \n        \n\n        if(clickedImages.length === 15){\n            this.setState({score: 15, status: \"You Won! Great Job\", clickedImages: []});\n            alert(\"You Win! You visited all 15 cities!\");\n            return;\n        }\n \n        this.setState({ cardsArr:shuffleImages, clickedImages, score: clickedImages.length, status: \" \" });\n    }\n}\n\n\n\nrender(){\n      return(\n\n        <div>\n          <Nav score ={this.state.score} goal ={this.state.highestScore} />\n          <Container>\n            <Instructions />\n            <CardsDisplay cardsArr ={this.state.cardsArr} shuffleImages={this.shuffleImages} />\n          </Container>\n          <Footer />\n        </div>\n      );\n}\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}